Iterative Development with PatchPilot
===================================

The system can be used iteratively by creating chains of todos and code generation steps, where each step builds on the previous output. Here's how to implement different iterative patterns:

1. Incremental Feature Development
--------------------------------
This pattern breaks down a large feature into smaller, iterative steps:

STEP 1: Create planning todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "User Authentication System",
    "description": "Plan: 1) Basic login 2) Password hashing 3) JWT tokens 4) Password reset"
  }' \
  http://192.168.194.33:8000/todos/

STEP 2: Generate basic login structure
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create basic login function structure",
    "language": "python",
    "requirements": ["Username/password input", "Basic validation"],
    "context": "Initial login structure"
  }' \
  http://192.168.194.33:8000/generate-code/

STEP 3: Create todo for password hashing
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Add password hashing",
    "description": "Enhance login with bcrypt password hashing"
  }' \
  http://192.168.194.33:8000/todos/

STEP 4: Generate password hashing code
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Add bcrypt password hashing to login",
    "language": "python",
    "requirements": ["Use bcrypt", "Salt generation", "Hash verification"],
    "context": "Building on basic login structure"
  }' \
  http://192.168.194.33:8000/generate-code/

[Continue with JWT tokens and password reset...]


2. Test-Driven Development (TDD)
-------------------------------
This pattern alternates between test creation and implementation:

STEP 1: Create test todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Write calculator tests",
    "description": "TDD: Create tests for add and subtract functions"
  }' \
  http://192.168.194.33:8000/todos/

STEP 2: Generate tests
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create calculator test suite",
    "language": "python",
    "requirements": [
      "Test add function with positive numbers",
      "Test add function with negative numbers",
      "Test subtract function"
    ],
    "context": "TDD first step"
  }' \
  http://192.168.194.33:8000/generate-code/

STEP 3: Create implementation todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Implement calculator functions",
    "description": "Implement add and subtract to pass tests"
  }' \
  http://192.168.194.33:8000/todos/

STEP 4: Generate implementation
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Implement calculator functions to pass tests",
    "language": "python",
    "requirements": [
      "Add function handling positive/negative numbers",
      "Subtract function with tests"
    ],
    "context": "Implementation based on existing tests"
  }' \
  http://192.168.194.33:8000/generate-code/


3. Iterative Refinement
----------------------
This pattern uses feedback from each step to improve the code:

STEP 1: Initial implementation
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create basic data validator",
    "language": "python",
    "requirements": ["Validate string input"],
    "context": "Initial version"
  }' \
  http://192.168.194.33:8000/generate-code/

STEP 2: Create refinement todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Enhance validation",
    "description": "Add email and phone number validation"
  }' \
  http://192.168.194.33:8000/todos/

STEP 3: Generate enhancement
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Add email and phone validation to existing validator",
    "language": "python",
    "requirements": [
      "Email validation with regex",
      "Phone number format checking"
    ],
    "context": "Enhancing existing validator"
  }' \
  http://192.168.194.33:8000/generate-code/


4. Bug Fix Iteration
-------------------
This pattern iteratively fixes and verifies bugs:

STEP 1: Create bug todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Fix input validation bug",
    "description": "Bug: Special characters cause validation failure"
  }' \
  http://192.168.194.33:8000/todos/

STEP 2: Generate fix
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Fix special character validation",
    "language": "python",
    "requirements": ["Handle special characters"],
    "context": "Bug fix iteration 1"
  }' \
  http://192.168.194.33:8000/generate-code/

STEP 3: Create verification todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Verify bug fix",
    "description": "Add tests for special character handling"
  }' \
  http://192.168.194.33:8000/todos/

STEP 4: Generate tests
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create tests for special character validation",
    "language": "python",
    "requirements": ["Test special characters", "Test edge cases"],
    "context": "Verifying bug fix"
  }' \
  http://192.168.194.33:8000/generate-code/


Best Practices for Iterative Development
--------------------------------------
1. Context Chaining
   - Always reference previous steps in the context
   - Include file paths of related code
   - Mention relevant todo IDs

2. Incremental Requirements
   - Start with basic requirements
   - Add complexity gradually
   - Keep track of completed features

3. Feedback Integration
   - Create todos for feedback items
   - Reference specific issues in code generation
   - Update existing code with improvements

4. Progress Tracking
   - Mark todos as complete after verification
   - Use search to find related todos
   - Keep documentation updated

5. Version Management
   - Create todos for version upgrades
   - Track breaking changes
   - Maintain backward compatibility


Tips for Effective Iteration
--------------------------
1. Small Steps
   - Break down large changes into smaller iterations
   - Verify each step before moving forward
   - Keep changes focused and atomic

2. Clear Dependencies
   - Document dependencies between steps
   - Reference related code and todos
   - Maintain a clear upgrade path

3. Testing Strategy
   - Write tests for each iteration
   - Update tests as features evolve
   - Maintain test coverage

4. Documentation Updates
   - Keep docs in sync with changes
   - Document breaking changes
   - Update examples and workflows

5. Error Handling
   - Add error cases incrementally
   - Test edge cases in each iteration
   - Improve error messages over time 