AutoCodeRover API Commands Guide
================================

1. Basic Commands
----------------

Todo Management:
--------------
# Create a new todo
curl -X POST "http://localhost:8000/todos/" \
  -H "Content-Type: application/json" \
  -d '{"title": "Task Name", "description": "Task Description"}'

# List all todos
curl "http://localhost:8000/todos/"

# Mark todo as complete (replace {id} with actual todo ID)
curl -X PUT "http://localhost:8000/todos/{id}/complete"

# Mark todo as incomplete
curl -X PUT "http://localhost:8000/todos/{id}/uncomplete"

# Delete a specific todo
curl -X DELETE "http://localhost:8000/todos/{id}"

# Search todos
curl "http://localhost:8000/todos/search?query=your_search_term"

# Clear all todos (utility command)
for id in $(curl -s "http://localhost:8000/todos/" | grep -o '"id":[0-9]*' | grep -o '[0-9]*'); do \
  curl -X DELETE "http://localhost:8000/todos/$id"; \
done

Code Generation:
--------------
# Generate code
curl -X POST "http://localhost:8000/generate-code/" \
  -H "Content-Type: application/json" \
  -d '{
    "description": "Description of what code to generate",
    "language": "python",
    "requirements": [
      "Requirement 1",
      "Requirement 2"
    ],
    "context": "Additional context"
  }'

2. Example Workflows
-------------------

A. Basic Todo Management Workflow:
--------------------------------
1. Create a todo:
   curl -X POST "http://localhost:8000/todos/" \
     -H "Content-Type: application/json" \
     -d '{"title": "Write API Documentation", "description": "Create comprehensive API docs"}'

2. List todos to get the ID:
   curl "http://localhost:8000/todos/"

3. Mark as complete:
   curl -X PUT "http://localhost:8000/todos/1/complete"

4. Verify completion:
   curl "http://localhost:8000/todos/"

B. Code Generation Workflow:
--------------------------
1. Create todo for coding task:
   curl -X POST "http://localhost:8000/todos/" \
     -H "Content-Type: application/json" \
     -d '{
       "title": "Create Data Validation Utility",
       "description": "Build a JSON schema validator"
     }'

2. Generate the code:
   curl -X POST "http://localhost:8000/generate-code/" \
     -H "Content-Type: application/json" \
     -d '{
       "description": "Create a JSON schema validator",
       "language": "python",
       "requirements": [
         "Support basic data types",
         "Include error messages",
         "Add type hints"
       ],
       "context": "Data validation module"
     }'

3. Mark todo as complete after code generation:
   curl -X PUT "http://localhost:8000/todos/1/complete"

C. Project Planning Workflow:
---------------------------
1. Create multiple related todos:
   curl -X POST "http://localhost:8000/todos/" \
     -H "Content-Type: application/json" \
     -d '{"title": "Design Database Schema", "description": "Create ERD"}'

   curl -X POST "http://localhost:8000/todos/" \
     -H "Content-Type: application/json" \
     -d '{"title": "Implement Models", "description": "Create database models"}'

2. Search for related todos:
   curl "http://localhost:8000/todos/search?query=database"

3. Generate code for each todo:
   curl -X POST "http://localhost:8000/generate-code/" \
     -H "Content-Type: application/json" \
     -d '{
       "description": "Create SQLAlchemy models",
       "language": "python",
       "requirements": [
         "Include all necessary fields",
         "Add relationships",
         "Include validation"
       ],
       "context": "Database models for the application"
     }'

4. Mark todos as complete:
   curl -X PUT "http://localhost:8000/todos/{id}/complete"

3. Tips and Best Practices
-------------------------
1. Always verify todo creation/completion by listing todos
2. Use meaningful descriptions in code generation requests
3. Include specific requirements for better code generation
4. Use the search functionality to find related todos
5. Clear completed todos periodically to maintain organization
6. Save generated code files with descriptive names
7. Test generated code before marking todos as complete

4. Common Patterns
-----------------
1. Create todo → Generate code → Mark complete
2. Create multiple related todos → Search → Process in order
3. Generate code → Review → Regenerate with updated requirements
4. Create todo → Break into subtasks → Process sequentially

Note: Replace 'localhost' with your actual server address (e.g., '192.168.194.33')
when using these commands.

5. Code Generation File Structure
-------------------------------
Generated code is organized in the following structure:

project/patches/
└── YYYYMMDD_HHMMSS_descriptive_name/  # Timestamp-based directory
    ├── src/                           # Source code directory
    │   └── main_code_file.py          # Generated code file
    ├── tests/                         # Test directory (if applicable)
    │   └── test_file.py
    ├── README.md                      # Documentation
    └── metadata.txt                   # Generation metadata

Example path:
project/patches/20250702_065415_create_a_python_data_validation_utility/src/create_a_python_data_validation_utility.py

Directory naming convention:
- YYYYMMDD: Date (e.g., 20250702 for July 2, 2025)
- HHMMSS: Time (e.g., 065415 for 06:54:15)
- descriptive_name: Hyphenated description of the code

Tips:
1. Each generation creates a new timestamped directory
2. Source code is always in the src/ subdirectory
3. Tests (when generated) are in the tests/ subdirectory
4. Documentation and metadata are included for reference
5. File paths are returned in the code generation response

3. Git Commands
--------------
# Initialize git repository
curl -X POST "http://localhost:8000/git/init"

# Configure git user
curl -X POST "http://localhost:8000/git/config" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Your Name",
    "email": "your.email@example.com"
  }'

# Add remote repository
curl -X POST "http://localhost:8000/git/remote" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "origin",
    "url": "https://github.com/username/repo.git"
  }'

# Create a commit
curl -X POST "http://localhost:8000/git/commit" \
  -H "Content-Type: application/json" \
  -d '{
    "message": "Your commit message",
    "files": ["file1.py", "file2.py"]
  }'

# Push changes
curl -X POST "http://localhost:8000/git/push" \
  -H "Content-Type: application/json" \
  -d '{
    "remote": "origin",
    "branch": "main"
  }'

# Get git status
curl "http://localhost:8000/git/status"

# Push a specific patch
curl -X POST "http://localhost:8000/git/push-patch/{patch_id}" \
  -H "Content-Type: application/json" \
  -d '{
    "commit_message": "Optional custom commit message",
    "remote": "origin",
    "branch": "main"
  }'

Example Patch Push Workflow:
-------------------------
1. Generate code:
   curl -X POST "http://localhost:8000/generate-code/" \
     -H "Content-Type: application/json" \
     -d '{
       "description": "Create a math utility",
       "language": "python",
       "requirements": ["numpy"]
     }'

2. Initialize git repository (if not already done):
   curl -X POST "http://localhost:8000/git/init"

3. Configure git (if not already done):
   curl -X POST "http://localhost:8000/git/config" \
     -H "Content-Type: application/json" \
     -d '{
       "name": "Your Name",
       "email": "your.email@example.com"
     }'

4. Add remote repository (if not already done):
   curl -X POST "http://localhost:8000/git/remote" \
     -H "Content-Type: application/json" \
     -d '{
       "name": "origin",
       "url": "https://github.com/username/repo.git"
     }'

5. Push the patch:
   curl -X POST "http://localhost:8000/git/push-patch/20250707_102910_create_a_math_utility" \
     -H "Content-Type: application/json" \
     -d '{
       "commit_message": "Add math utility with numpy support",
       "remote": "origin",
       "branch": "main"
     }'

Notes:
- The patch push command will automatically add all relevant files (source, requirements, metadata, README)
- A default commit message will be generated if none is provided
- The command uses the default remote "origin" and branch "main" if not specified
- Make sure the remote repository is properly configured before pushing

Example Git Workflow:
-------------------
1. Initialize repository:
   curl -X POST "http://localhost:8000/git/init"

2. Configure user:
   curl -X POST "http://localhost:8000/git/config" \
     -H "Content-Type: application/json" \
     -d '{
       "name": "John Doe",
       "email": "john@example.com"
     }'

3. Add remote:
   curl -X POST "http://localhost:8000/git/remote" \
     -H "Content-Type: application/json" \
     -d '{
       "name": "origin",
       "url": "https://github.com/username/repo.git"
     }'

4. Check status:
   curl "http://localhost:8000/git/status"

5. Commit changes:
   curl -X POST "http://localhost:8000/git/commit" \
     -H "Content-Type: application/json" \
     -d '{
       "message": "Initial commit",
       "files": ["."]
     }'

6. Push to remote:
   curl -X POST "http://localhost:8000/git/push" 