AutoCodeRover Example Workflows
============================

1. Basic Todo Management
-----------------------
# Create a new todo
curl -X POST -H "Content-Type: application/json" \
  -d '{"title": "Implement login", "description": "Create user authentication system"}' \
  http://192.168.194.33:8000/todos/

# List all todos
curl http://192.168.194.33:8000/todos/

# Mark todo as complete (replace {id} with actual todo ID)
curl -X PUT http://192.168.194.33:8000/todos/{id}/complete

# Search todos
curl "http://192.168.194.33:8000/todos/search?query=login"


2. Code Generation Workflow
--------------------------
# Generate a Python calculator
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create a calculator class with basic operations",
    "language": "python",
    "requirements": [
      "Addition",
      "Subtraction",
      "Multiplication",
      "Division with error handling"
    ],
    "context": "Math utility library"
  }' \
  http://192.168.194.33:8000/generate-code/


3. Combined Todo + Code Generation
--------------------------------
# 1. Create todo for feature
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Create data processor",
    "description": "Build a CSV data processing utility that can filter and transform data"
  }' \
  http://192.168.194.33:8000/todos/

# 2. Generate the code
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Build a CSV data processing utility that can filter and transform data",
    "language": "python",
    "requirements": [
      "Read CSV files",
      "Filter rows based on conditions",
      "Transform columns",
      "Save output to new CSV"
    ],
    "context": "Data processing pipeline"
  }' \
  http://192.168.194.33:8000/generate-code/

# 3. Mark todo as complete
curl -X PUT http://192.168.194.33:8000/todos/{id}/complete


4. Project Setup Workflow
------------------------
# 1. Create project planning todos
curl -X POST -H "Content-Type: application/json" \
  -d '{"title": "Project setup", "description": "Initial project structure and dependencies"}' \
  http://192.168.194.33:8000/todos/

curl -X POST -H "Content-Type: application/json" \
  -d '{"title": "Create models", "description": "Define data models and database schema"}' \
  http://192.168.194.33:8000/todos/

curl -X POST -H "Content-Type: application/json" \
  -d '{"title": "Setup API endpoints", "description": "Implement REST API endpoints"}' \
  http://192.168.194.33:8000/todos/

# 2. Generate project structure
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create initial FastAPI project structure",
    "language": "python",
    "requirements": [
      "FastAPI application structure",
      "Database models",
      "API routes",
      "Configuration management"
    ],
    "context": "Web API project setup"
  }' \
  http://192.168.194.33:8000/generate-code/


5. Bug Fix Workflow
------------------
# 1. Create bug tracking todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Fix data validation",
    "description": "Input validation fails for special characters in user input"
  }' \
  http://192.168.194.33:8000/todos/

# 2. Generate fix
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Fix input validation for special characters",
    "language": "python",
    "requirements": [
      "Validate special characters",
      "Sanitize input",
      "Add error handling"
    ],
    "context": "Bug fix for data validation"
  }' \
  http://192.168.194.33:8000/generate-code/


6. Testing Workflow
------------------
# 1. Create test todo
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "title": "Add unit tests",
    "description": "Create comprehensive test suite for user authentication"
  }' \
  http://192.168.194.33:8000/todos/

# 2. Generate tests
curl -X POST -H "Content-Type: application/json" \
  -d '{
    "description": "Create unit tests for user authentication",
    "language": "python",
    "requirements": [
      "Test user registration",
      "Test login/logout",
      "Test password reset",
      "Mock database calls"
    ],
    "context": "Testing user authentication system"
  }' \
  http://192.168.194.33:8000/generate-code/


Tips:
-----
1. Always include detailed descriptions in todos for better code generation
2. Use the search endpoint to group related todos
3. Break down large features into smaller todos
4. Include error handling requirements in code generation
5. Add test requirements in the code generation context
6. Keep track of generated file paths
7. Use todo descriptions to document design decisions

Quick Reference:
---------------
Server: http://192.168.194.33:8000
Main Endpoints:
- POST /todos/         (Create todo)
- GET /todos/          (List todos)
- PUT /todos/{id}/complete  (Complete todo)
- GET /todos/search    (Search todos)
- POST /generate-code/ (Generate code) 